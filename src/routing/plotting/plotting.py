from networkx import Graph
from plotly import graph_objects as go

from routing.containers.routes import Route

# TODO: For final output, use difflib to ensure each suggested route is
#       significantly different from the next.


def generate_filename(route: Route) -> str:
    gain = route.elevation_gain
    dist = route.distance
    name = f"gain_{gain:,.2f}_dist_{dist:,.2f}"
    return name


# TODO: Use dash-leaflet to rewrite this function


def plot_elevation_profile(graph: Graph, route: Route) -> go.Figure:
    """For a generated route, generate a plotly graph which displays the
    elevation profile.

    Args:
        route (Route): A route generated by a RouteMaker"""

    cml_dist = 0
    last_id = None
    dists, eles = [], []
    for node_id in route.route:
        node = graph.nodes[node_id]
        ele = node["elevation"]

        if last_id is None:
            step_dist = 0
        else:
            step_dist = graph[last_id][node_id]["distance"]

        cml_dist += step_dist
        last_id = node_id

        eles.append(ele)
        dists.append(cml_dist)

    route_trace = go.Scatter(
        mode="lines+markers", x=dists, y=eles, line=dict(shape="spline")
    )

    layout = go.Layout(title="Elevation Profile")

    figure = go.Figure(data=[route_trace], layout=layout)

    return figure


def plot_route(graph: Graph, route: Route) -> go.Figure:
    """For a generated route, generate a Plotly graph which plots it onto
    a mapbox map.

    Args:
        graph (Graph): A graph containing latitude & longitude information for
          every node visited in the provided route
        route (Route): A route generated by a RouteMaker

    Returns:
        go.Figure: A mapbox plot of the provided route
    """
    last_id = None
    cml_dist = 0
    lats, lons, eles, dists = [], [], [], []
    for node_id in route.route:
        node = graph.nodes[node_id]
        lat = node["lat"]
        lon = node["lon"]
        ele = node["elevation"]

        if last_id is None:
            step_dist = 0
        else:
            step_dist = graph[last_id][node_id]["distance"]

        cml_dist += step_dist
        last_id = node_id

        lats.append(lat)
        lons.append(lon)
        eles.append(ele)
        dists.append(cml_dist)

    text = [
        f"Distance: {dist:,.2f}km\nElevation: {ele:,.2f}m"
        for ele, dist in zip(eles, dists)
    ]

    route_trace = go.Scattermapbox(
        mode="lines+markers",
        lat=lats,
        lon=lons,
        text=text,
        marker=dict(color=dists, colorscale="agsunset", size=3),
    )
    se_trace = go.Scattermapbox(
        mode="markers", lat=lats[0:1], lon=lons[0:1], marker=dict(size=20)
    )

    distance = route.distance
    elevation = route.elevation_gain
    title = f"Distance: {distance}, Elevation: {elevation}"

    layout = go.Layout(
        # margin={"l": 0, "t": 0, "r": 0, "l": 0},
        mapbox={"center": {"lon": lons[0], "lat": lats[0]}},
        mapbox_style="open-street-map",
        mapbox_zoom=10,
        title=title,
        hovermode="closest",
    )

    fig = go.Figure(data=[route_trace, se_trace], layout=layout)

    return fig
